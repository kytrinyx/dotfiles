set nocompatible
syntax on
filetype plugin indent on

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" remember more commands and search history
set history=10000

" Make tab completion for files/buffers act like bash
set wildmenu

set shell=bash

" show line numbers
set nu

set autoindent
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set numberwidth=4
set wrap
set showmatch
set incsearch
" set winwidth=84
" highlighting search
set hls
" highlight current line
set cursorline
set cmdheight=2
" Always show tab bar
set showtabline=2
" show whitespace
set list listchars=tab:\ \ ,trail:Â·

let mapleader=","

:nnoremap <leader><leader> <c-^>

" disable escape (force use of <C-c>)
:inoremap <esc> <nop>
" make C-c act like esc for stuff like :normal I
:inoremap <C-c> <esc>
" disable backspace (force use of <C-h>, and <C-w>)
:inoremap <bs> <nop>

:color tir_black
":color github
if &diff
   color simplediff
endif

highlight ExtraWhitespace ctermbg=196 guibg=#FF1100 ctermfg=white guifg=white
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

:nnoremap <CR> :nohlsearch<cr>
" clear the search buffer when hitting return
:nnoremap W :%s/ *$//g<cr><c-o><cr>

if has("autocmd")
  autocmd BufRead,BufNewFile *.go set filetype=go autoread

  autocmd FileType text,markdown,md setlocal textwidth=78
  autocmd FileType ruby,yaml,javascript set autoindent expandtab sts=2 sw=2 ts=2
  autocmd Filetype gitcommit setlocal spell textwidth=72
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
endif

:nnoremap <leader>t :!rspec %<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
map <leader>r :!gofmt -w %<cr>
map <leader>g :!go run %<cr>
map <leader>v :!approvals verify -d vimdiff -a<cr>

" Courtesy of Gary Bernhardt
function! PromoteToLet()
  :normal! dd
" :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

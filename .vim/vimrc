set nocompatible
syntax on
filetype plugin indent on

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Make tab completion for files/buffers act like bash
set wildmenu

" show line numbers
set nu

set autoindent
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set numberwidth=4
set wrap
set t_Co=256
set showmatch
set incsearch
set winwidth=84
" highlighting search
set hls
" highlight current line
set cursorline
set cmdheight=2
" Always show tab bar
set showtabline=2
" show whitespace
set list listchars=tab:\ \ ,trail:Â·

let mapleader=","

:nnoremap <leader><leader> <c-^>

" disable escape (force use of <C-c>)
:inoremap <esc> <nop>
" make C-c act like esc for stuff like :normal I
:inoremap <C-c> <esc>
" disable backspace (force use of <C-h>, and <C-w>)
:inoremap <bs> <nop>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    syntax on
    set guifont=Inconsolata-dz:h14
endif

:color github
if &diff
   color simplediff
endif

highlight ExtraWhitespace ctermbg=196 guibg=#FF1100 ctermfg=white guifg=white
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

:nnoremap <CR> :nohlsearch<cr>
" clear the search buffer when hitting return
:nnoremap W :%s/ *$//g<cr><c-o><cr>

if has("autocmd")
  autocmd FileType text setlocal textwidth=78
  autocmd FileType ruby,yaml,javascript set autoindent expandtab sts=2 sw=2 ts=2
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
endif

:nnoremap <leader>t :!rspec %<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo
    if filereadable("script/test")
        exec ":!script/test " . a:filename
    else
        exec ":!rspec " . a:filename
    end
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:current_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_spec_file = match(expand("%"), '_spec.rb$') != -1
    if in_spec_file
        call SetTestFile()
    elseif !exists("t:current_test_file")
        return
    end
    call RunTests(t:current_test_file . command_suffix)
endfunction

map <leader>t :call RunTestFile()<cr>

function! PromoteToLet()
  :normal! dd
" :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>


" Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
